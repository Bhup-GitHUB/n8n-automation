generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  workflows   Workflow[]
  credentials Credential[]

  @@map("users")
}

model Workflow {
  id          String   @id @default(cuid())
  title       String
  description String?
  enabled     Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodes       Node[]
  connections Connection[]
  webhooks    Webhook[]
  executions  Execution[]

  @@map("workflows")
}

model Node {
  id         String   @id @default(cuid())
  workflowId String
  type       NodeType
  name       String
  position   Json     
  config     Json     
  createdAt  DateTime @default(now())


  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("nodes")
}

model Connection {
  id         String @id @default(cuid())
  workflowId String
  sourceId   String 
  targetId   String 
  
 
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("connections")
}


model Webhook {
  id         String     @id @default(cuid())
  workflowId String
  path       String     @unique 
  method     HttpMethod @default(POST)
  enabled    Boolean    @default(true)
  createdAt  DateTime   @default(now())

 
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}


model Execution {
  id         String          @id @default(cuid())
  workflowId String
  status     ExecutionStatus @default(RUNNING)
  startedAt  DateTime        @default(now())
  finishedAt DateTime?
  error      String?
  data       Json?          

  
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("executions")
}


model Credential {
  id        String   @id @default(cuid())
  userId    String
  name      String
  platform  Platform
  data      Json    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credentials")
}


enum NodeType {
  TRIGGER   
  ACTION    
  CONDITION
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

enum ExecutionStatus {
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum Platform {
  HTTP    
  EMAIL     
  SLACK    
  TELEGRAM  
  GITHUB   
  WEBHOOK 
}


